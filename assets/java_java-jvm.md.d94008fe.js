import{_ as s,c as a,o as l,N as n}from"./chunks/framework.0799945b.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"java/java-jvm.md"}'),o={name:"java/java-jvm.md"},p=n(`<h2 id="_1-什么情况下会发生栈内存溢出。" tabindex="-1">1. 什么情况下会发生栈内存溢出。 <a class="header-anchor" href="#_1-什么情况下会发生栈内存溢出。" aria-label="Permalink to &quot;1. 什么情况下会发生栈内存溢出。&quot;">​</a></h2><p>思路： 描述栈定义，再描述为什么会溢出，再说明一下相关配置参数，OK的话可以给面试官手写是一 个栈溢出的demo。</p><ul><li>栈是线程私有的，他的生命周期与线程相同，每个方法在执行的时候都会创建一个栈帧，用来存储局部变量表，操作数栈，动态链接，方法出口等信息。局部变量表又包含基本数据类型，对象引用类型</li><li>如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常，方法递归调用产生这种结果。</li><li>如果Java虚拟机栈可以动态扩展，并且扩展的动作已经尝试过，但是无法申请到足够的内存去完成扩展，或者在新建立线程的时候没有足够的内存去创建对应的虚拟机栈，那么Java虚拟机将抛出一 个OutOfMemory 异常。(线程启动过多)</li><li>参数 -Xss 去调整JVM栈的大小</li></ul><h2 id="_2-详解jvm内存模型" tabindex="-1">2. 详解JVM内存模型 <a class="header-anchor" href="#_2-详解jvm内存模型" aria-label="Permalink to &quot;2. 详解JVM内存模型&quot;">​</a></h2><p>思路： 给面试官画一下JVM内存模型图，并描述每个模块的定义，作用，以及可能会存在的问题，如栈溢出等。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8fa5e72750b34c74b528bc37a845450e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ul><li>程序计数器：当前线程所执行的字节码的行号指示器，用于记录正在执行的虚拟机字节指令地址，线程私有。</li></ul><blockquote><p><strong>字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。</strong></p></blockquote><ul><li>Java虚拟栈：存放基本数据类型、对象的引用、方法出口等，线程私有。</li><li>Native方法栈：和虚拟栈相似，只不过它服务于Native方法，线程私有。</li><li>Java堆：java内存最大的一块，所有对象实例、数组都存放在java堆，GC回收的地方，线程共享。</li><li>方法区：存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码数据等。（即永久带）， 回收目标主要是常量池的回收和类型的卸载，各线程共享</li></ul><h2 id="_3-jvm内存为什么要分成新生代-老年代-持久代。新生代中为什么-要分为eden和survivor。" tabindex="-1">3. JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么 要分为Eden和Survivor。 <a class="header-anchor" href="#_3-jvm内存为什么要分成新生代-老年代-持久代。新生代中为什么-要分为eden和survivor。" aria-label="Permalink to &quot;3. JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么 要分为Eden和Survivor。&quot;">​</a></h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a66ecc5516f42139b818e7d6fd5f3ed~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><blockquote><p>为什么分年老代和新生代</p></blockquote><p>1、新生代：年轻代主要存放新创建的对象，内存大小相对会比较小，垃圾回收会比较频繁。</p><p>2、老年代：年老代主要存放JVM认为生命周期比较长的对象（经过 几次的新生代的垃圾回收后仍然存在），内存大小相对会比较大，垃圾回收也相对没有那么频繁。</p><blockquote><p>为什么要分为Eden和Survivor?为什么要设置两个Survivor区？</p></blockquote><ul><li>如果没有Survivor，Eden区每进行一次Minor GC，存活的对象就会被送到老年代。老年代很快被 填满，触发Major GC.老年代的内存空间远大于新生代，进行一次Full GC消耗的时间比Minor GC 长得多,所以需要分为Eden和Survivor。</li><li>Survivor的存在意义，就是减少被送到老年代的对象，进而减少Full GC的发生，Survivor的预筛选保证，只有经历16次Minor GC还能在新生代中存活的对象，才会被送到老年代。</li><li>设置两个Survivor区最大的好处就是解决了碎片化，刚刚新建的对象在Eden中，经历一次Minor GC，Eden中的存活对象就会被移动到第一块survivor space S0，Eden被清空；等Eden区再满 了，就再触发一次Minor GC，Eden和S0中的存活对象又会被复制送入第二块survivor space S1（这个过程非常重要，因为这种复制算法保证了S1中来自S0和Eden两部分的存活对象占用连续 的内存空间，避免了碎片化的发生）</li></ul><h2 id="_4-jvm中一次完整的gc流程是怎样的-对象如何晋升到老年代" tabindex="-1">4. JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代 <a class="header-anchor" href="#_4-jvm中一次完整的gc流程是怎样的-对象如何晋升到老年代" aria-label="Permalink to &quot;4. JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代&quot;">​</a></h2><p>思路： 先描述一下Java堆内存划分，再解释Minor GC，Major GC，full GC，描述它们之间转化流程。</p><ul><li>Java堆 = 老年代 + 新生代</li><li>新生代 = Eden + S0 + S1</li><li>当 Eden 区的空间满了， Java虚拟机会触发一次 Minor GC，以收集新生代的垃圾，存活下来的对象，则会转移到 Survivor区。</li><li><code>大对象</code>（需要大量连续内存空间的Java对象，如那种很长的字符串）<code>直接进入老年态</code>；</li><li>如果对象在Eden出生，并经过第一次Minor GC后仍然存活，并且被Survivor容纳的话，年龄设为 1，每熬过一次Minor GC，年龄+1，<code>若年龄超过一定限制（15）</code>，则被晋升到<code>老年态</code>。即<code>长期存活的对象</code>进入老年态。</li><li>老年代满了而<code>无法容纳更多的对象</code>，Minor GC 之后通常就会进行Full GC，Full GC 清理整个内存堆 – 包括<code>年轻代和年老代</code>。</li><li>Major GC 发生在<code>老年代的GC</code>，<code>清理老年区</code>，经常会伴随至少一次Minor GC，比Minor GC慢10 倍以上。</li></ul><h2 id="_5-你知道哪几种垃圾收集器-各自的优缺点-重点讲下cms和g1-包括原理-流程-优缺点。" tabindex="-1">5. 你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms和G1，包括原理，流程，优缺点。 <a class="header-anchor" href="#_5-你知道哪几种垃圾收集器-各自的优缺点-重点讲下cms和g1-包括原理-流程-优缺点。" aria-label="Permalink to &quot;5. 你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms和G1，包括原理，流程，优缺点。&quot;">​</a></h2><p>思路： 一定要记住典型的垃圾收集器，尤其cms和G1，它们的原理与区别，涉及的垃圾回收算法。</p><p>1）几种垃圾收集器：</p><ul><li><p>年轻代</p><ul><li>Serial收集器： 单线程的收集器，收集垃圾时，必须stop the world，使用复制算法。</li><li>ParNew收集器： Serial收集器的多线程版本，也需要stop the world，复制算法。</li><li>Parallel Scavenge收集器： 新生代收集器，复制算法的收集器，并发的多线程收集器，目标是达到一个可控的吞吐量。如果虚拟机总共运行100分钟，其中垃圾花掉1分钟，吞吐量就是99%。</li></ul></li><li><p>老年代</p><ul><li>Serial Old收集器： 是Serial收集器的老年代版本，单线程收集器，使用标记整理算法。</li><li>Parallel Old收集器： 是Parallel Scavenge收集器的老年代版本，使用多线程，标记-整理算法。</li><li>CMS(Concurrent Mark Sweep) 收集器： 是一种以获得最短回收停顿时间为目标的收集器，标 记清除算法，运作过程：初始标记，并发标记，重新标记，并发清除，收集结束会产生大量空间碎片。</li></ul></li><li><p>G1收集器： 标记整理算法实现，运作流程主要包括以下：初始标记，并发标记，最终标记，筛选标记。不会产生空间碎片，可以精确地控制停顿。</p></li></ul><p>2）CMS收集器和G1收集器的区别：</p><ul><li>CMS收集器是老年代的收集器，可以配合新生代的Serial和ParNew收集器一起使用；</li><li>G1收集器收集范围是老年代和新生代，不需要结合其他收集器使用；</li><li>CMS收集器以最小的停顿时间为目标的收集器；</li><li>G1收集器可预测垃圾回收的停顿时间</li><li>CMS收集器是使用“标记-清除”算法进行的垃圾回收，容易产生内存碎片</li><li>G1收集器使用的是“标记-整理”算法，进行了空间整合，降低了内存空间碎片。</li></ul><h2 id="_6-jvm内存模型的相关知识了解多少-比如重排序-内存屏障-happen-before-主内存-工作内存。" tabindex="-1">6. JVM内存模型的相关知识了解多少，比如重排序，内存屏障， happen-before，主内存，工作内存。 <a class="header-anchor" href="#_6-jvm内存模型的相关知识了解多少-比如重排序-内存屏障-happen-before-主内存-工作内存。" aria-label="Permalink to &quot;6. JVM内存模型的相关知识了解多少，比如重排序，内存屏障， happen-before，主内存，工作内存。&quot;">​</a></h2><p>思路： 先画出Java内存模型图，结合例子volatile ，说明什么是重排序，内存屏障，最好能给面试官写 以下demo说明。</p><blockquote><p>Java内存模型图：</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f74daa1a51fa4135a17d71afe876cb13~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>Java内存模型规定了所有的<code>变量都存储在主内存</code>中，每条<code>线程还有自己的工作内存</code>，线程的工作内存中保存了该线程中是用到的变量的主内存副本拷贝，<code>线程对变量的所有操作都必须在工作内存</code>中进行，<code>而不能直接读写主内存</code>。不同的线程之间也<code>无法直接访问对方工作内存中的变量</code>，线程间变量的传递均需 要自己的工作内存和主存之间进行数据同步进行。</p><blockquote><p>指令重排序</p></blockquote><p>在这里，先看一段代码</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PossibleReordering</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Thread</span><span style="color:#A6ACCD;"> one </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Runnable</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">            a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Thread</span><span style="color:#A6ACCD;"> other </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Runnable</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">            b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    one</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    other</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    one</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    other</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">“</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">” </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> “</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">” </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> “</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">”</span><span style="color:#89DDFF;">);}</span></span></code></pre></div><p>运行结果可能为(1,0)、(0,1)或(1,1)，也可能是(0,0)。</p><p>大多数现代微处理器都会采用将指令乱序执行（out-of-order execution，简 称OoOE或OOE）的方法，在条件允许的情况下，直接运行当前有能力立即执行的后续指令，避开获取 下一条指令所需数据时造成的等待。<code>通过乱序执行的技术，处理器可以大大提高执行效率</code>。而这就是<code>指令重排</code>。</p><blockquote><p>内存屏障</p></blockquote><p>内存屏障，也叫内存栅栏，是一种CPU指令，用于控制特定条件下的重排序和内存可见性问题。</p><ul><li>LoadLoad屏障：对于这样的语句Load1; LoadLoad; Load2，在Load2及后续读取操作要读取的 数据被访问前，保证Load1要读取的数据被读取完毕。</li><li>StoreStore屏障：对于这样的语句Store1; StoreStore; Store2，在Store2及后续写入操作执行 前，保证Store1的写入操作对其它处理器可见。</li><li>LoadStore屏障：对于这样的语句Load1; LoadStore; Store2，在Store2及后续写入操作被刷出 前，保证Load1要读取的数据被读取完毕。</li><li>StoreLoad屏障：对于这样的语句Store1; StoreLoad; Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。它的开销是四种屏障中最大的。 在大多数处理器的实现中，这个屏障是个万能屏障，兼具其它三种内存屏障的功能。</li></ul><blockquote><p>happen-before原则</p></blockquote><ol start="0"><li><p>程序顺序规则</p><ul><li>某个线程中的每个动作都happens-before该线程中该动作后面的动作。</li></ul></li><li><p>锁定规则</p><ul><li>某个线程（对象锁）上的unlock动作happens-before同一个管程上后续的lock动作。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HappensBeforeLock</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">synchronized</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setValue</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">synchronized</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getValue</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span></code></pre></div><blockquote><p>上面这段代码，setValue和getValue两个方法共享同一个监视器锁。假设setValue方法在线程A中执行，getValue方法在线程B中执行。setValue方法会先对value变量赋值，然后释放锁。getValue方法会先获取到同一个锁后，再读取value的值。所以根据锁定原则，线程A中对value变量的修改，可以被线程B感知到。</p></blockquote></li><li><p>volatile变量规则</p></li><li><p>线程启动规则</p><ul><li>调用start方法时，会将start方法之前所有操作的结果同步到主内存中，新线程创建好后，需要从主内存获取数据。这样在start方法调用之前的所有操作结果对于新创建的线程都是可见的。</li></ul></li><li><p>线程结束规则</p><ul><li>假设两个线程s、t。在线程s中调用t.join()方法。则线程s会被挂起，等待t线程运行结束才能恢复执行。当t.join()成功返回时，s线程就知道t线程已经结束了。所以根据本条原则，在t线程中对共享变量的修改，对s线程都是可见的。</li></ul></li><li><p>中断规则</p><ul><li>假设两个线程A和B，A先做了一些操作operationA，然后调用B线程的interrupt方法。当B线程感知到自己的中断标识被设置时(通过抛出InterruptedException，或调用interrupted和isInterrupted),operationA中的操作结果对B都是可见的。</li></ul></li><li><p>终结器规则</p><ul><li>一个对象的构造函数执行结束Happens-Before它的finalize()方法的开始。 “结束”和“开始”表明在时间上，一个对象的构造函数必须在它的finalize()方法调用时执行完。 根据这条原则，可以确保在对象的finalize方法执行时，该对象的所有field字段值都是可见的。</li></ul></li><li><p>传递性规则</p><ul><li>如果操作A Happens-Before B，B Happens-Before C，那么可以得出操作A Happens-Before C。</li></ul></li></ol><h2 id="_7-简单说说你了解的类加载器-可以打破双亲委派么-怎么打破。" tabindex="-1">7. 简单说说你了解的类加载器，可以打破双亲委派么，怎么打破。 <a class="header-anchor" href="#_7-简单说说你了解的类加载器-可以打破双亲委派么-怎么打破。" aria-label="Permalink to &quot;7. 简单说说你了解的类加载器，可以打破双亲委派么，怎么打破。&quot;">​</a></h2><p>思路： 先说明一下什么是类加载器，可以给面试官画个图，再说一下类加载器存在的意义，说一下双亲 委派模型，最后阐述怎么打破双亲委派模型。</p><ol start="0"><li>什么是类加载器？</li></ol><p>类加载器 就是根据指定全限定名称将class文件加载到JVM内存，转为Class对象。</p><ul><li><code>启动类加载器（Bootstrap ClassLoader）</code>：由C++语言实现（针对HotSpot）,负责将存放在 \\lib目录或-Xbootclasspath参数指定的路径中的类库加载到内存中。</li><li><code>扩展类加载器（Extension ClassLoader）</code>：负责加载\\lib\\ext目录或 java.ext.dirs系统变量指定的路径中的所有类库。</li><li><code>应用程序类加载器（Application ClassLoader）</code>。负责加载用户类路径（classpath）上 的指定类库，我们可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载 器默认就是用这个加载器。</li><li><code>（自定义）其他类加载器</code>：由Java语言实现，继承自抽象类ClassLoader。</li></ul><h3 id="双亲委派模型" tabindex="-1">双亲委派模型 <a class="header-anchor" href="#双亲委派模型" aria-label="Permalink to &quot;双亲委派模型&quot;">​</a></h3><ul><li>双亲委派模型工作过程是：</li></ul><blockquote><p>如果一个类加载器收到类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器完成。每个类加载器都是如此，只有当父加载器在自己的搜索范围内找不到指定的 类时（即ClassNotFoundException），子加载器才会尝试自己去加载。</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/209ba89c483848e089a08df3591f88d0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">loadClass</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> resolve</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        throws </span><span style="color:#C792EA;">ClassNotFoundException</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">synchronized</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">getClassLoadingLock</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// First, check if the class has already been loaded</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findLoadedClass</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> t0 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nanoTime</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">parent </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                        c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> parent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadClass</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                        c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findBootstrapClassOrNull</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ClassNotFoundException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;font-style:italic;">// ClassNotFoundException thrown if class not found</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;font-style:italic;">// from the non-null parent class loader</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;font-style:italic;">// If still not found, then invoke findClass in order</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;font-style:italic;">// to find the class.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> t1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nanoTime</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                    c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findClass</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="为什么需要双亲委派模型" tabindex="-1">为什么需要双亲委派模型？ <a class="header-anchor" href="#为什么需要双亲委派模型" aria-label="Permalink to &quot;为什么需要双亲委派模型？&quot;">​</a></h3><p>在这里，先想一下，如果没有双亲委派，那么用户是不是可以<code>自己定义一个java.lang.Object的同名 类，java.lang.String的同名类</code>，并把它放到ClassPath中,那么<code>类之间的比较结果及类的唯一性将无法保证</code>，因此，为什么需要双亲委派模型？<code>防止内存中出现多份同样的字节码</code></p><h3 id="怎么打破双亲委派模型" tabindex="-1">怎么打破双亲委派模型？ <a class="header-anchor" href="#怎么打破双亲委派模型" aria-label="Permalink to &quot;怎么打破双亲委派模型？&quot;">​</a></h3><p>打破双亲委派机制则不仅要继承ClassLoader类，还要重写<code>loadClass</code>和<code>findClass</code>方法。</p><h2 id="_8-说说你知道的几种主要的jvm参数" tabindex="-1">8. 说说你知道的几种主要的JVM参数 <a class="header-anchor" href="#_8-说说你知道的几种主要的jvm参数" aria-label="Permalink to &quot;8. 说说你知道的几种主要的JVM参数&quot;">​</a></h2><p>1）堆栈配置相关</p><ul><li>-Xmx3550m： 最大堆大小为3550m。</li><li>-Xms3550m： 设置初始堆大小为3550m。</li><li>-Xmn2g： 设置年轻代大小为2g。</li><li>-Xss128k： 每个线程的堆栈大小为128k。</li><li>-XX:MaxTenuringThreshold=0： 设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过 Survivor区，直接进入年老代。</li></ul><p>2）垃圾收集器相关</p><ul><li></li></ul><h2 id="_9-判定为gc的不可达对象一定就会被回收嘛" tabindex="-1">9. 判定为GC的不可达对象一定就会被回收嘛 <a class="header-anchor" href="#_9-判定为gc的不可达对象一定就会被回收嘛" aria-label="Permalink to &quot;9. 判定为GC的不可达对象一定就会被回收嘛&quot;">​</a></h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a25ded08be2949148ecfdbf0b06f556d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="_10-可以做为gc-root的根对象有哪些" tabindex="-1">10. 可以做为GC ROOT的根对象有哪些 <a class="header-anchor" href="#_10-可以做为gc-root的根对象有哪些" aria-label="Permalink to &quot;10. 可以做为GC ROOT的根对象有哪些&quot;">​</a></h2><ul><li>静态变量（方法区中的类静态属性引用的<strong>对象</strong>）</li><li>常量（方法区中常量引用的<strong>对象</strong>）</li><li>栈帧中的局部变量表中的元素</li><li>JNI本地方法栈中引用的对象</li></ul><h2 id="_11-什么是浮动垃圾" tabindex="-1">11. 什么是浮动垃圾 <a class="header-anchor" href="#_11-什么是浮动垃圾" aria-label="Permalink to &quot;11. 什么是浮动垃圾&quot;">​</a></h2><p>浮动垃圾就是在<code>CMS并发清理阶段，用户线程还在运行</code>，伴随着用户线程的运行就会有新的垃圾产生，这一部分垃圾出现在标记过程之后，<code>CMS无法在当次收集中处理它们，只好留到下一次GC的时候再清理</code>，这就是浮动垃圾</p><h2 id="_12-类加载机制" tabindex="-1">12. 类加载机制 <a class="header-anchor" href="#_12-类加载机制" aria-label="Permalink to &quot;12. 类加载机制&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54432166fb8f453bb42f6d5f5f660736~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ul><li>装载：</li></ul><p>1）ClassFile -- &gt; 字节流 -- &gt; 类加载器</p><p>2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</p><p>3）在我们的堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的入口</p><ul><li><p>链接</p><ul><li><p>验证</p><ul><li>文件格式验证</li><li>元数据验证</li><li>字节码验证</li><li>符号引用验证</li></ul></li><li><p>准备</p><ul><li>为类的静态变量分配内存，并赋值（当前类型的默认值）</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在准备阶段他的值就是0</p></li><li><p>解析</p><ul><li>解析是从运行时常量池中的符号引用动态确定具体值的过程</li><li>符号引用转换成直接引用</li></ul></li></ul></li><li><p>初始化</p><ul><li>方法执行到了Clinit阶段，初始化静态变量的值、初始化静态代码块、初始化当前类的父类</li></ul></li></ul><h2 id="_13-类加载器有哪些" tabindex="-1">13. 类加载器有哪些 <a class="header-anchor" href="#_13-类加载器有哪些" aria-label="Permalink to &quot;13. 类加载器有哪些&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5af59472eb3b4d18aa59f98dcb95f32a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>`,74),e=[p];function t(c,r,i,C,D,A){return l(),a("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
